{"version":3,"sources":["styles/Typing.module.css","styles/Icon.module.css","styles/Text.module.css","styles/Form.module.css","styles/Header.module.css","styles/Backdrop.module.css","styles/Image.module.css","styles/Suggestion.module.css","styles/Modal.module.css","styles/Avatar.module.css","styles/Message.module.css","styles/Log.module.css","styles/Group.module.css","styles/SuggestionBox.module.css","styles/ChatBox.module.css","styles/ChatButton.module.css","hooks/useToggleState.js","components/ui/Icon.js","config/bot.js","components/chat-box/Header.js","components/chat-box/log/messages/Text.js","components/ui/Backdrop.js","components/ui/Modal.js","components/chat-box/log/messages/Image.js","components/chat-box/log/messages/Avatar.js","components/chat-box/log/messages/Typing.js","components/chat-box/log/messages/Message.js","components/chat-box/log/messages/Group.js","components/chat-box/log/Log.js","components/chat-box/suggestions/Suggestion.js","components/chat-box/suggestions/SuggestionBox.js","hooks/useInputState.js","components/chat-box/Form.js","helpers/randomFromArray.js","helpers/messages/error.js","config/dialogflow.js","helpers/fetchBotResponse.js","helpers/messages/starter.js","hooks/useLogState.js","config/speechOutput.js","components/chat-box/ChatBox.js","components/ChatButton.js","components/App.js","helpers/serviceWorker.js","index.js"],"names":["module","exports","initialState","useState","state","setState","toggleState","Icon","type","name","onClick","marginRight","disableHover","className","icon","hoverIcon","iconMargin","avatar","Header","toggleChatBox","speechOutput","toggleSpeechOutput","header","botName","bot","Text","message","user","text","self","Backdrop","show","closeModal","backdrop","close","Modal","children","modal","Image","src","alt","useToggleState","toggleModal","imageModal","image","Avatar","img","TypingIndicator","container","dot","memo","typing","hasAvatar","style","marginLeft","noAvatar","texts","images","group","map","i","key","Log","log","noSuggestions","useEffect","end","current","scrollIntoView","behavior","useRef","logs","height","Group","ref","Suggestion","suggestionText","suggestion","suggestionMessage","suggestions","handleSubmit","suggestionBox","display","length","change","event","target","value","reset","Form","speechInput","toggleSpeechInput","useInputState","changeText","resetText","onSubmit","trim","form","input","autoFocus","rows","disabled","onChange","nativeEvent","inputType","placeholder","formButtons","array","Math","floor","random","userResponse","a","response","$","post","url","dialogflow","contentType","dataType","headers","Authorization","data","JSON","stringify","query","lang","sessionId","then","res","result","fulfillment","speech","split","splice","catch","errorMessages","starterMessage","addLog","volume","rate","pitch","voice","ChatBox","open","Speech","speechRecognition","window","webkitSpeechRecognition","init","speechConfig","error","console","onresult","transcript","resultIndex","results","onUserResponse","useLogState","setSuggestions","setTyping","cancel","start","stop","fetchBotResponse","onBotResponse","chatBox","ChatButton","chatButton","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.146f20dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Typing_container__35Jos\",\"dot\":\"Typing_dot__3RFGR\",\"wave\":\"Typing_wave__qZRrP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"Icon_icon__3T9-N\",\"iconMargin\":\"Icon_iconMargin__2UzjK\",\"hoverIcon\":\"Icon_hoverIcon__1Cq8g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Text_text__3mQMw\",\"bot\":\"Text_bot__sjNxO\",\"self\":\"Text_self__1A19Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__24Orp\",\"input\":\"Form_input__3GJ_y\",\"formButtons\":\"Form_formButtons__14i1e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__25WCN\",\"botName\":\"Header_botName___zpoI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Backdrop_backdrop__2P_Ui\",\"close\":\"Backdrop_close__3idOk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"Image_image__3We8l\",\"imageModal\":\"Image_imageModal__tb07l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"suggestion\":\"Suggestion_suggestion__1jQiU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1sIhn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__1dfnH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__35BHq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logs\":\"Log_logs__-WBgR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"Group_group__1X63p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"suggestionBox\":\"SuggestionBox_suggestionBox__1oBal\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBox\":\"ChatBox_chatBox__2Nh-K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatButton\":\"ChatButton_chatButton__skEXu\"};","import { useState } from 'react';\r\n\r\nexport default (initialState = false) => {\r\n\tconst [ state, setState ] = useState(initialState);\r\n\tconst toggleState = () => setState((state) => !state);\r\n\treturn [ state, toggleState ];\r\n};\r\n","import React from 'react';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\nimport { icon, hoverIcon, iconMargin } from 'styles/Icon.module.css';\r\n\r\nexport default function Icon({ type = 'fas', name, onClick, marginRight, disableHover }) {\r\n\treturn (\r\n\t\t<i\r\n\t\t\tclassName={`${type} fa-${name} ${icon} ${!disableHover && hoverIcon} \r\n\t\t\t\t${marginRight && iconMargin}`}\r\n\t\t\tonClick={onClick}\r\n\t\t/>\r\n\t);\r\n}\r\n","export default {\r\n  name: 'natalie',\r\n  avatar: 'https://i.ibb.co/cDCL67q/bot.png'\r\n}","import React from 'react';\r\nimport Icon from 'components/ui/Icon';\r\nimport bot from 'config/bot';\r\nimport { header, botName } from 'styles/Header.module.css';\r\n\r\nexport default function Header({ toggleChatBox, speechOutput, toggleSpeechOutput }) {\r\n\treturn (\r\n\t\t<div className={header}>\r\n\t\t\t<h4 className={botName}>{bot.name}</h4>\r\n\t\t\t<span>\r\n\t\t\t\t<Icon\r\n\t\t\t\t\tname={`${speechOutput ? 'volume-up' : 'volume-mute'}`}\r\n\t\t\t\t\tonClick={toggleSpeechOutput}\r\n\t\t\t\t\tmarginRight\r\n\t\t\t\t/>\r\n\t\t\t\t<Icon name=\"minus\" onClick={toggleChatBox} marginRight />\r\n\t\t\t</span>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport { text, bot, self } from 'styles/Text.module.css';\r\n\r\nexport default function Text({ message, user }) {\r\n\treturn <p className={`${text} ${user === 'bot' ? bot : self}`}>{message}</p>;\r\n}\r\n","import React from 'react';\r\nimport Icon from 'components/ui/Icon';\r\nimport { backdrop, close } from 'styles/Backdrop.module.css';\r\n\r\nexport default function Backdrop({ show, closeModal }) {\r\n\treturn (\r\n\t\tshow && (\r\n\t\t\t<div className={backdrop} onClick={closeModal}>\r\n\t\t\t\t<div className={close}>\r\n\t\t\t\t\t<Icon name=\"times\" />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport Backdrop from 'components/ui/Backdrop';\r\nimport { modal } from 'styles/Modal.module.css';\r\n\r\nexport default function Modal({ children, show, closeModal }) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className={modal}>{children}</div>\r\n\t\t\t<Backdrop show={show} closeModal={closeModal} />\r\n\t\t</>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport useToggleState from 'hooks/useToggleState';\r\nimport Modal from 'components/ui/Modal';\r\nimport { image, imageModal } from 'styles/Image.module.css';\r\n\r\nexport default function Image({ src, alt }) {\r\n\tconst [ modal, toggleModal ] = useToggleState();\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{modal && (\r\n\t\t\t\t<Modal show={modal} closeModal={toggleModal}>\r\n\t\t\t\t\t<img className={imageModal} src={src} alt={alt} />\r\n\t\t\t\t</Modal>\r\n\t\t\t)}\r\n\t\t\t<img className={image} src={src} alt={alt} onClick={toggleModal} />\r\n\t\t</>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport { avatar } from 'styles/Avatar.module.css';\r\n\r\nexport default function Avatar({ name, img }) {\r\n\treturn (\r\n\t\t<div className={avatar}>\r\n\t\t\t<img src={img} alt={`${name} avatar`} />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport { container, dot } from 'styles/Typing.module.css';\r\n\r\nexport default function TypingIndicator() {\r\n\treturn (\r\n\t\t<div className={container}>\r\n\t\t\t<span className={dot} />\r\n\t\t\t<span className={dot} />\r\n\t\t\t<span className={dot} />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { memo } from 'react';\r\nimport bot from 'config/bot';\r\nimport Text from 'components/chat-box/log/messages/Text';\r\nimport Image from 'components/chat-box/log/messages/Image';\r\nimport Avatar from 'components/chat-box/log/messages/Avatar';\r\nimport Typing from 'components/chat-box/log/messages/Typing';\r\nimport { message } from 'styles/Message.module.css';\r\n\r\nexport default memo(function Message({ text, image, user, typing, hasAvatar }) {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={message}\r\n\t\t\tstyle={{\r\n\t\t\t\tmarginLeft: hasAvatar ? 'none' : '60px',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{hasAvatar && <Avatar name={bot.name} img={bot.avatar} />}\r\n\t\t\t{text && <Text message={text} user={user} />}\r\n\t\t\t{image && <Image src={image} alt=\"requested\" noAvatar={!hasAvatar} />}\r\n\t\t\t{typing && <Typing />}\r\n\t\t</div>\r\n\t);\r\n});\r\n","import React, { memo } from 'react';\r\nimport Message from 'components/chat-box/log/messages/Message';\r\nimport { group } from 'styles/Group.module.css';\r\n\r\nexport default memo(function MessageGroup({ texts = [], images = [], user = 'bot' }) {\r\n\treturn (\r\n\t\t<div className={group}>\r\n\t\t\t{texts.map((text, i) => (\r\n\t\t\t\t<Message\r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t\ttext={text}\r\n\t\t\t\t\tuser={user}\r\n\t\t\t\t\thasAvatar={user === 'bot' && i === 0}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t\t{images.map((image, i) => (\r\n\t\t\t\t<Message\r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t\timage={image}\r\n\t\t\t\t\tuser={user}\r\n\t\t\t\t\thasAvatar={user === 'bot' && i === 0}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n});\r\n","import React, { useRef, useEffect } from 'react';\r\nimport Message from 'components/chat-box/log/messages/Message';\r\nimport { logs } from 'styles/Log.module.css';\r\nimport Group from 'components/chat-box/log/messages/Group';\r\n\r\nexport default function Log({ log, typing, noSuggestions }) {\r\n\tuseEffect(() => end.current.scrollIntoView({ behavior: 'smooth' }));\r\n\tconst end = useRef();\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={logs}\r\n\t\t\tstyle={{ height: noSuggestions ? 'calc(70vh + 50px)' : '70vh' }}\r\n\t\t>\r\n\t\t\t{log.map(({ texts, images, user }, i) => (\r\n\t\t\t\t<Group texts={texts} images={images} user={user} key={i} />\r\n\t\t\t))}\r\n\t\t\t{typing && <Message key=\"typing\" user=\"bot\" typing hasAvatar />}\r\n\t\t\t<div ref={end} />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport { suggestion, suggestionMessage } from 'styles/Suggestion.module.css';\r\n\r\nexport default function Suggestion({ suggestionText, onClick }) {\r\n\tconst handleClick = () => onClick(suggestionText);\r\n\treturn (\r\n\t\t<div className={suggestion} onClick={handleClick}>\r\n\t\t\t<p className={suggestionMessage}>{suggestionText}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { memo } from 'react';\r\nimport Suggestion from 'components/chat-box/suggestions/Suggestion';\r\nimport { suggestionBox } from 'styles/SuggestionBox.module.css';\r\n\r\nexport default memo(function SuggestionBox({ suggestions, handleSubmit }) {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={suggestionBox}\r\n\t\t\tstyle={{ display: suggestions.length === 0 ? 'none' : 'flex' }}\r\n\t\t>\r\n\t\t\t{suggestions.map((suggestion, i) => (\r\n\t\t\t\t<Suggestion suggestionText={suggestion} key={i} onClick={handleSubmit} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n});\r\n","import { useState } from 'react';\r\nexport default (initialState = '') => {\r\n\tconst [ state, setState ] = useState(initialState);\r\n\tconst change = (event) => setState(event.target.value);\r\n\tconst reset = () => setState('');\r\n\treturn [ state, change, reset ];\r\n};","import React from 'react';\r\nimport useInputState from 'hooks/useInputState';\r\nimport Icon from 'components/ui/Icon';\r\nimport { form, input, formButtons } from 'styles/Form.module.css';\r\n\r\nexport default function Form({ handleSubmit, speechInput, toggleSpeechInput }) {\r\n\tconst [ text, changeText, resetText ] = useInputState();\r\n\r\n\tconst handleChange = (event) =>\r\n\t\tevent.nativeEvent.inputType === 'insertLineBreak'\r\n\t\t\t? onSubmit()\r\n\t\t\t: changeText(event);\r\n\r\n\tconst onSubmit = () => {\r\n\t\tif (text.trim() !== '') handleSubmit(text);\r\n\t\tresetText();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={form}>\r\n\t\t\t<div className={input}>\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\tvalue={text}\r\n\t\t\t\t\tdisabled={speechInput}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tplaceholder={speechInput ? 'Say Something ...' : 'Type a message'}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className={formButtons}>\r\n\t\t\t\t<Icon name=\"arrow-right\" onClick={onSubmit} marginRight />\r\n\t\t\t\t<Icon\r\n\t\t\t\t\tname={`${speechInput ? 'microphone' : 'microphone-slash'}`}\r\n\t\t\t\t\tonClick={toggleSpeechInput}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","export default (array) => array[Math.floor(Math.random() * array.length)];","export default [\r\n\t'i think something is wrong. could you try again later?',\r\n\t'i cant contact the server. could you try again later?',\r\n\t'it seems like something is wrong. could you try again later?',\r\n\t'something is wrong. could you try again later?'\r\n];\r\n","export default {\r\n\turl: 'https://api.dialogflow.com/v1/query?v=20150910',\r\n\taccessToken: '38578c4faf424691a4540abffe6a1ec8',\r\n\tsessionId: 'izqGQrUr7FItDPD1XVKuVxGbiDBRNspylOSwfNfA',\r\n};\r\n","import $ from 'jquery';\r\nimport random from 'helpers/randomFromArray';\r\nimport errorMessages from 'helpers/messages/error';\r\nimport dialogflow from 'config/dialogflow';\r\n\r\nexport default async (userResponse) => {\r\n\tlet response = {};\r\n\tawait $.post({\r\n\t\turl: dialogflow.url,\r\n\t\tcontentType: 'application/json; charset=utf-8',\r\n\t\tdataType: 'json',\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${dialogflow.accessToken}`\r\n\t\t},\r\n\t\tdata: JSON.stringify({\r\n\t\t\tquery: userResponse,\r\n\t\t\tlang: 'en',\r\n\t\t\tsessionId: dialogflow.sessionId\r\n\t\t})\r\n\t})\r\n\t\t.then((res) => {\r\n\t\t\tres = res.result.fulfillment.speech;\r\n\t\t\tconst suggestions = res.split(/<ar>/);\r\n\t\t\tres = suggestions[0];\r\n\t\t\tresponse.suggestions = suggestions.splice(1);\r\n\r\n\t\t\tconst texts = res.split(/<br>/);\r\n\t\t\tres = texts[0];\r\n\t\t\tresponse.texts = texts.splice(1);\r\n\t\t\tresponse.images = res.split(/<img>/).splice(1);\r\n\t\t})\r\n\t\t.catch(() => (response.texts = [ random(errorMessages) ]));\r\n\treturn response;\r\n};\r\n","import bot from '../../config/bot';\r\nimport random from '../randomFromArray';\r\n\r\nconst greeting = [ 'hello', 'hey', 'hey there', 'hello there' ];\r\nconst intro = [ 'my name is', 'i am' ]\r\n\r\nexport default [{\r\n\ttexts: [`${random(greeting)}, ${random(intro)} ${bot.name} ! what would you like to know about?`],\r\n\tuser: 'bot'\r\n}];","import { useState } from 'react';\r\nimport starterMessage from '../helpers/messages/starter';\r\n\r\nexport default (initialState = []) => {\r\n\tconst [ state, setState ] = useState(starterMessage || initialState);\r\n\tconst addLog = (response, user) =>\r\n\t\tsetState((state) => [\r\n\t\t\t...state,\r\n\t\t\t{ texts: response.texts, images: response.images, user}\r\n\t\t]);\r\n\treturn [ state, addLog ];\r\n};\r\n","export default {\r\n\tvolume: 1,\r\n\tlang: 'en-GB',\r\n\trate: 1,\r\n\tpitch: 1,\r\n\tvoice: 'Google UK English Female'\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport useToggleState from 'hooks/useToggleState';\r\nimport Speech from 'speak-tts';\r\nimport Header from 'components/chat-box/Header';\r\nimport Log from 'components/chat-box/log/Log';\r\nimport SuggestionBox from 'components/chat-box/suggestions/SuggestionBox';\r\nimport Form from 'components/chat-box/Form';\r\nimport fetchBotResponse from 'helpers/fetchBotResponse';\r\nimport useLogState from 'hooks/useLogState';\r\nimport speechConfig from 'config/speechOutput';\r\nimport { chatBox } from 'styles/ChatBox.module.css';\r\n\r\nexport default function ChatBox({ open, toggleChatBox }) {\r\n\tconst speech = new Speech(),\r\n\t\tspeechRecognition = new window.webkitSpeechRecognition();\r\n\r\n\tspeech\r\n\t\t.init(speechConfig)\r\n\t\t.catch((error) =>\r\n\t\t\tconsole.error('An error occured while initializing Speech : ', error)\r\n\t\t);\r\n\tspeechRecognition.onresult = (event) => {\r\n\t\tlet transcript = '';\r\n\t\tfor (let i = event.resultIndex; i < event.results.length; ++i)\r\n\t\t\ttranscript += event.results[i][0].transcript;\r\n\t\tonUserResponse(transcript);\r\n\t\ttoggleSpeechInput();\r\n\t};\r\n\r\n\tconst [ log, addLog ] = useLogState();\r\n\tconst [ suggestions, setSuggestions ] = useState([]);\r\n\tconst [ speechInput, toggleSpeechInput ] = useToggleState();\r\n\tconst [ typing, setTyping ] = useState(false);\r\n\tconst [ speechOutput, toggleSpeechOutput ] = useToggleState(true);\r\n\r\n\tuseEffect(speech.cancel, [ speechOutput ]);\r\n\tuseEffect(\r\n\t\t() => (speechInput ? speechRecognition.start() : speechRecognition.stop()),\r\n\t\t[ speechInput, speechRecognition ]\r\n\t);\r\n\r\n\tconst onUserResponse = (response) => {\r\n\t\tfetchBotResponse(response).then(onBotResponse);\r\n\t\taddLog({ texts: [ response ] }, 'user');\r\n\t\tsetTyping(true);\r\n\t};\r\n\r\n\tconst onBotResponse = (response) => {\r\n\t\tsetSuggestions(response.suggestions);\r\n\t\taddLog(response, 'bot');\r\n\t\tsetTyping(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={chatBox} style={{ display: open ? 'block' : 'none' }}>\r\n\t\t\t<Header\r\n\t\t\t\ttoggleChatBox={toggleChatBox}\r\n\t\t\t\tspeechOutput={speechOutput}\r\n\t\t\t\ttoggleSpeechOutput={toggleSpeechOutput}\r\n\t\t\t/>\r\n\t\t\t<Log log={log} typing={typing} noSuggestions={suggestions.length === 0} />\r\n\t\t\t<SuggestionBox suggestions={suggestions} handleSubmit={onUserResponse} />\r\n\t\t\t<Form\r\n\t\t\t\tspeechInput={speechInput}\r\n\t\t\t\ttoggleSpeechInput={toggleSpeechInput}\r\n\t\t\t\thandleSubmit={onUserResponse}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport Icon from 'components/ui/Icon';\r\nimport { chatButton } from 'styles/ChatButton.module.css';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\n\r\nexport default function ChatButton({ toggleChatBox }) {\r\n\treturn (\r\n\t\t<div className={chatButton} onClick={toggleChatBox}>\r\n\t\t\t<Icon name=\"comments\" disableHover />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport useToggleState from 'hooks/useToggleState';\r\nimport ChatBox from 'components/chat-box/ChatBox';\r\nimport ChatButton from 'components/ChatButton';\r\n\r\nfunction App() {\r\n\tconst [ chatBox, toggleChatBox ] = useToggleState(false);\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ChatBox toggleChatBox={toggleChatBox} open={chatBox} />\r\n\t\t\t<ChatButton toggleChatBox={toggleChatBox} />\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './helpers/serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}