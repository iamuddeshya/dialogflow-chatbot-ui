{"version":3,"sources":["styles/Message.module.css","styles/Form.module.css","styles/Header.module.css","styles/Suggestions.module.css","styles/Logs.module.css","styles/ChatButton.module.css","styles/Chat.module.css","hooks/useToggleState.js","components/Icon.js","components/ChatButton.js","components/Header.js","components/Message.js","components/Logs.js","components/Suggestions.js","hooks/useInputState.js","components/Form.js","helpers/speechOutput.js","components/ChatBox.js","components/App.js","helpers/serviceWorker.js","index.js"],"names":["module","exports","initialState","useState","state","setState","toggleState","type","name","onClick","className","ChatButton","toggleChatBox","classes","chatButton","Icon","Header","speechOutput","toggleSpeechOutput","chatBoxHeader","chatBotName","icons","memo","text","image","variant","typingIndicator","chat","bot","self","botImg","chatMessage","imageMessage","src","alt","container","dot","Logs","messages","logEnd","useRef","useEffect","current","scrollIntoView","behavior","chatBoxContent","chatLogs","map","i","key","ref","suggestions","handleSubmit","length","suggestionContainer","suggesstion","suggestion","suggestionMessage","change","event","target","value","reset","Form","speechInput","toggleSpeechInput","useInputState","changeText","resetText","chatForm","chatInput","placeholder","disabled","onChange","nativeEvent","inputType","userResponse","onSubmit","rows","data-min-rows","input","autoFocus","chatFormButtons","speech","Speech","init","volume","lang","rate","pitch","voice","catch","error","console","ChatBox","open","voiceRecogntion","window","webkitSpeechRecognition","log","setLog","setSuggestions","useToggleState","typing","toggleTyping","setTyping","cancel","startVoiceRecognition","stop","addMessage","speak","newLog","push","postUserResponseToAPI","$","ajax","url","contentType","dataType","headers","Authorization","data","JSON","stringify","query","sessionId","then","parseResponse","result","fulfillment","res","replace","includes","suggestionResponse","chatResponse","imageResponse","split","splice","message","addImage","onresult","resultIndex","results","transcript","start","chatBox","style","display","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c87d06d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Message_chat__3apUG\",\"botImg\":\"Message_botImg__3AUtM\",\"chatMessage\":\"Message_chatMessage__1kbKd\",\"imageMessage\":\"Message_imageMessage__10Rmk\",\"bot\":\"Message_bot__2M-xT\",\"self\":\"Message_self__1Kmk-\",\"container\":\"Message_container__1aLjG\",\"dot\":\"Message_dot__1yObV\",\"wave\":\"Message_wave__KTODa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatForm\":\"Form_chatForm__oGsDh\",\"chatInput\":\"Form_chatInput___bDBy\",\"chatFormButtons\":\"Form_chatFormButtons__GiBZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBoxHeader\":\"Header_chatBoxHeader__BwgVn\",\"icons\":\"Header_icons__3PMeB\",\"chatBotName\":\"Header_chatBotName__2E5aY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"suggestionContainer\":\"Suggestions_suggestionContainer__2fpto\",\"suggestion\":\"Suggestions_suggestion__9_y5s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBoxContent\":\"Logs_chatBoxContent__Ua5_i\",\"chatLogs\":\"Logs_chatLogs__2tZOD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatButton\":\"ChatButton_chatButton__3zMDW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBox\":\"Chat_chatBox__Hi-39\"};","import { useState } from 'react';\r\n\r\nexport default (initialState = false) => {\r\n\tconst [ state, setState ] = useState(initialState);\r\n\tconst toggleState = () => setState(!state);\r\n\treturn [ state, toggleState, setState ];\r\n};\r\n","import React from 'react';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\nexport default ({ type, name, onClick }) => (\r\n\t<i className={`${type} ${name}`} onClick={onClick} />\r\n);\r\n","import React from 'react';\r\nimport Icon from './Icon';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\nimport classes from '../styles/ChatButton.module.css';\r\n\r\nexport default function ChatButton({ toggleChatBox }) {\r\n\treturn (\r\n\t\t<div className={classes.chatButton} onClick={toggleChatBox}>\r\n\t\t\t<Icon type='fas' name='fa-comments' />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport Icon from './Icon';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\nimport classes from '../styles/Header.module.css';\r\n\r\nexport default function Header({ toggleChatBox, speechOutput, toggleSpeechOutput }) {\r\n\treturn (\r\n\t\t<div className={classes.chatBoxHeader}>\r\n\t\t\t<h4 className={classes.chatBotName}>Chat Bot</h4>\r\n\t\t\t<div className={classes.icons}>\r\n\t\t\t\t<Icon\r\n\t\t\t\t\ttype='fas'\r\n\t\t\t\t\tname={`fa-${speechOutput ? 'volume-up' : 'volume-mute'}`}\r\n\t\t\t\t\tonClick={toggleSpeechOutput}\r\n\t\t\t\t/>\r\n\t\t\t\t<Icon type='fas' name='fa-minus' onClick={toggleChatBox} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { memo } from 'react';\r\nimport classes from '../styles/Message.module.css';\r\n\r\nexport default memo(function Message({ text = '', image, variant, typingIndicator }) {\r\n\tconst { chat, bot, self, botImg, chatMessage, imageMessage } = classes;\r\n\treturn (\r\n\t\t<div className={`${chat} ${variant === 'bot' ? bot : self}`}>\r\n\t\t\t{variant === 'bot' && (\r\n\t\t\t\t<div className={botImg}>\r\n\t\t\t\t\t<img src=\"https://i.ibb.co/cDCL67q/bot.png\" alt=\"bot\" />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{typingIndicator && (\r\n\t\t\t\t<div className={classes.container}>\r\n\t\t\t\t\t<span className={classes.dot} />\r\n\t\t\t\t\t<span className={classes.dot} />\r\n\t\t\t\t\t<span className={classes.dot} />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{text && <p className={chatMessage}>{text}</p>}\r\n\t\t\t{image && <img className={imageMessage} src={image} />}\r\n\t\t</div>\r\n\t);\r\n});\r\n","import React, { useRef, useEffect } from 'react';\r\nimport Message from './Message';\r\nimport classes from '../styles/Logs.module.css';\r\n\r\nexport default function Logs({ messages, typingIndicator }) {\r\n\tconst logEnd = useRef();\r\n\tuseEffect(() => logEnd.current.scrollIntoView({ behavior: 'smooth' }));\r\n\treturn (\r\n\t\t<div className={classes.chatBoxContent}>\r\n\t\t\t<div className={classes.chatLogs}>\r\n\t\t\t\t{messages.map(({ text, variant, image }, i) => (\r\n\t\t\t\t\t<Message key={i} text={text} variant={variant} image={image} />\r\n\t\t\t\t))}\r\n\t\t\t\t{typingIndicator && (\r\n\t\t\t\t\t<Message key=\"typing\" variant=\"bot\" typingIndicator />\r\n\t\t\t\t)}\r\n\t\t\t\t<div ref={logEnd} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { memo } from 'react';\r\nimport classes from '../styles/Suggestions.module.css';\r\n\r\nexport default memo(function Suggestions({ suggestions, handleSubmit }) {\r\n\tif (suggestions.length === 0) return null;\r\n\treturn (\r\n\t\t<div className={classes.suggestionContainer}>\r\n\t\t\t{suggestions.map((suggesstion, i) => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tkey={suggesstion + i}\r\n\t\t\t\t\tclassName={classes.suggestion}\r\n\t\t\t\t\tonClick={() => handleSubmit(suggesstion)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<p className={classes.suggestionMessage}>{suggesstion}</p>\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n});\r\n","import { useState } from 'react';\r\nexport default (initialState = '') => {\r\n\tconst [ state, setState ] = useState(initialState);\r\n\tconst change = (event) => setState(event.target.value);\r\n\tconst reset = () => setState('');\r\n\treturn [ state, change, reset ];\r\n};","import React from 'react';\r\nimport Icon from './Icon';\r\nimport useInputState from '../hooks/useInputState';\r\nimport classes from '../styles/Form.module.css';\r\n\r\nexport default function Form({ handleSubmit, speechInput, toggleSpeechInput }) {\r\n\tconst [ text, changeText, resetText ] = useInputState();\r\n\r\n\tfunction handleChange(event) {\r\n\t\tevent.nativeEvent.inputType === 'insertLineBreak'\r\n\t\t\t? onSubmit()\r\n\t\t\t: changeText(event);\r\n\t}\r\n\r\n\tfunction onSubmit(userResponse = text) {\r\n\t\thandleSubmit(userResponse);\r\n\t\tresetText();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.chatForm}>\r\n\t\t\t<div className={classes.chatInput}>\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tvalue={text}\r\n\t\t\t\t\tplaceholder={speechInput ?'Say Something ...' : 'Type a message'}\r\n\t\t\t\t\tdisabled={speechInput}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\trows='1'\r\n\t\t\t\t\tdata-min-rows='1'\r\n\t\t\t\t\tclassName={classes.input}\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.chatFormButtons}>\r\n\t\t\t\t<Icon type='fas' name={`fa-${speechInput ?'microphone' : 'microphone-slash'}`} onClick={toggleSpeechInput} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import Speech from 'speak-tts';\r\n\r\nconst speech = new Speech();\r\nspeech\r\n\t.init({\r\n\t\tvolume: 0.5,\r\n\t\tlang: 'en-GB',\r\n\t\trate: 1,\r\n\t\tpitch: 1,\r\n\t\tvoice: 'Google UK English Female'\r\n\t})\r\n\t.catch((error) =>\r\n\t\tconsole.error('An error occured while initializing Speech : ', error)\r\n\t);\r\n\r\nexport default speech;\r\n","import React, { useState, useEffect } from 'react';\r\nimport useToggleState from '../hooks/useToggleState';\r\nimport $ from 'jquery';\r\nimport Header from './Header';\r\nimport Logs from './Logs';\r\nimport Suggestions from './Suggestions';\r\nimport Form from './Form';\r\nimport speech from '../helpers/speechOutput';\r\nimport classes from '../styles/Chat.module.css';\r\n\r\nexport default function ChatBox({ open, toggleChatBox }) {\r\n\tlet voiceRecogntion = new window.webkitSpeechRecognition();\r\n\tconst [ log, setLog ] = useState([\r\n\t\t{\r\n\t\t\ttext:\r\n\t\t\t\t\"Hey I am Krypto! Say ' Hi ' to talk with me. I'll let you know the details of our college\",\r\n\t\t\tvariant: 'bot'\r\n\t\t}\r\n  ]);\r\n\tconst [ suggestions, setSuggestions ] = useState([]);\r\n\tconst [ speechInput, toggleSpeechInput ] = useToggleState();\r\n\tconst [ typing, toggleTyping, setTyping ] = useToggleState();\r\n\tconst [ speechOutput, toggleSpeechOutput ] = useToggleState(true);\r\n\r\n\tuseEffect(speech.cancel, [ speechOutput ]);\r\n\tuseEffect(() => (speechInput ? startVoiceRecognition() : voiceRecogntion.stop()), [\r\n\t\tspeechInput\r\n\t]);\r\n\r\n\tconst addMessage = (text, variant) => {\r\n\t\tif (variant === 'bot') {\r\n\t\t\tsetTyping(false);\r\n\t\t\tif (speechOutput) speech.speak({ text });\r\n\t\t}\r\n\t\tlet newLog = log;\r\n\t\tnewLog.push({ text, variant });\r\n\t\tsetLog(newLog);\r\n\t};\r\n\r\n\tconst addImage = (image, variant) => {\r\n\t\tlet newLog = log;\r\n\t\tnewLog.push({ image, variant });\r\n\t\tsetLog(newLog);\r\n\t\tsetTyping(false);\r\n\t};\r\n\r\n\tconst handleSubmit = (userResponse) => {\r\n\t\taddMessage(userResponse, 'user');\r\n\t\tpostUserResponseToAPI(userResponse);\r\n\t};\r\n\r\n\tconst postUserResponseToAPI = (text) => {\r\n\t\ttoggleTyping();\r\n\t\t$.ajax({\r\n\t\t\ttype: 'POST',\r\n\t\t\turl: 'https://api.dialogflow.com/v1/query?v=20150910',\r\n\t\t\tcontentType: 'application/json; charset=utf-8',\r\n\t\t\tdataType: 'json',\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: 'Bearer ' + '38578c4faf424691a4540abffe6a1ec8'\r\n\t\t\t},\r\n\t\t\tdata: JSON.stringify({\r\n\t\t\t\tquery: text,\r\n\t\t\t\tlang: 'en',\r\n\t\t\t\tsessionId: 'somerandomthing'\r\n\t\t\t})\r\n\t\t})\r\n\t\t\t.then((data) => parseResponse(data.result.fulfillment.speech))\r\n\t\t\t.catch(() =>\r\n\t\t\t\taddMessage(\r\n\t\t\t\t\t\"it seems like there's something wrong. could you try again later?\",\r\n\t\t\t\t\t'bot'\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t};\r\n\r\n\tconst parseResponse = (res) => {\r\n\t\tres = res.replace(/[\"\"]/g, '');\r\n\t\tif (res.includes('<ar>')) suggestionResponse(res);\r\n\t\telse if (res.includes('<br>')) chatResponse(res);\r\n\t\telse if (res.includes('<img>')) imageResponse(res);\r\n\t\telse this.addMessage(res, 'bot');\r\n\t};\r\n\r\n\tconst suggestionResponse = (res) => {\r\n\t\tchatResponse(res.split(/<ar>/)[0]);\r\n\t\tsetSuggestions([])\r\n\t\tsetSuggestions(res.split(/<ar>/).splice(1))\r\n\t};\r\n\r\n\tconst chatResponse = (res) => {\r\n\t\tconst messages = res.split(/<br>/).splice(1);\r\n\t\tfor (let message of messages) addMessage(message, 'bot');\r\n\t};\r\n\r\n\tconst imageResponse = (res) => addImage(res.split(/<img>/)[1], 'bot');\r\n\r\n\tconst startVoiceRecognition = () => {\r\n\t\tvoiceRecogntion.lang = 'en-US';\r\n\t\tvoiceRecogntion.onresult = (event) => {\r\n\t\t\tlet text = '';\r\n\t\t\tfor (let i = event.resultIndex; i < event.results.length; ++i)\r\n\t\t\t\ttext += event.results[i][0].transcript;\r\n\t\t\tpostUserResponseToAPI(text);\r\n\t\t\taddMessage(text);\r\n\t\t\ttoggleSpeechInput();\r\n\t\t};\r\n\t\tvoiceRecogntion.start();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={classes.chatBox} style={{ display: open ? 'block' : 'none' }}>\r\n\t\t\t<Header\r\n\t\t\t\ttoggleChatBox={toggleChatBox}\r\n\t\t\t\tspeechOutput={speechOutput}\r\n\t\t\t\ttoggleSpeechOutput={toggleSpeechOutput}\r\n\t\t\t/>\r\n\t\t\t<Logs messages={log} typingIndicator={typing} />\r\n\t\t\t<Suggestions suggestions={suggestions} handleSubmit={handleSubmit} />\r\n\t\t\t<Form\r\n\t\t\t\tspeechInput={speechInput}\r\n\t\t\t\ttoggleSpeechInput={toggleSpeechInput}\r\n\t\t\t\taddMessage={addMessage}\r\n\t\t\t\thandleSubmit={handleSubmit}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport useToggleState from '../hooks/useToggleState';\r\nimport ChatButton from './ChatButton';\r\nimport ChatBox from './ChatBox';\r\nimport '../styles/App.css';\r\n\r\nfunction App() {\r\n\tconst [ chatBox, toggleChatBox ] = useToggleState(true);\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<ChatButton toggleChatBox={toggleChatBox} open={chatBox} />\r\n\t\t\t<ChatBox toggleChatBox={toggleChatBox} open={chatBox} />\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './helpers/serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}