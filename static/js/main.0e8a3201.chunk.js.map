{"version":3,"sources":["styles/Message.module.css","styles/Form.module.css","styles/Header.module.css","styles/Suggestions.module.css","styles/Logs.module.css","styles/ChatButton.module.css","styles/Chat.module.css","hooks/useToggleState.js","components/Icon.js","components/ChatButton.js","helpers/starterMessage.js","config/bot.js","hooks/useLogState.js","components/Header.js","components/Message.js","components/Logs.js","components/Suggestions.js","hooks/useInputState.js","components/Form.js","config/dialogflow.js","config/speechOutput.js","components/ChatBox.js","components/App.js","helpers/serviceWorker.js","index.js"],"names":["module","exports","initialState","useState","state","setState","toggleState","Icon","type","name","onClick","className","ChatButton","toggleChatBox","classes","chatButton","random","array","Math","floor","length","text","user","starterMessage","addLog","payload","Header","speechOutput","toggleSpeechOutput","chatBoxHeader","chatBotName","icons","memo","image","typingIndicator","chat","bot","self","botImg","chatMessage","imageMessage","src","alt","container","dot","Logs","log","logEnd","useRef","useEffect","current","scrollIntoView","behavior","chatBoxContent","chatLogs","map","i","key","ref","suggestions","handleSubmit","suggestionContainer","suggesstion","suggestion","suggestionMessage","change","event","target","value","reset","Form","speechInput","toggleSpeechInput","useInputState","changeText","resetText","chatForm","chatInput","placeholder","disabled","onChange","nativeEvent","inputType","userResponse","onSubmit","rows","data-min-rows","input","autoFocus","chatFormButtons","url","accessToken","sessionId","volume","lang","rate","pitch","voice","ChatBox","open","speech","Speech","speechRecognition","window","webkitSpeechRecognition","init","speechConfig","catch","error","console","onresult","resultIndex","results","transcript","fetchBotResponse","addMessage","useLogState","setSuggestions","useToggleState","typing","toggleTyping","cancel","start","stop","speak","onUserResponse","res","dialogflow","$","post","contentType","dataType","headers","Authorization","data","JSON","stringify","query","then","parseBotResponse","result","fulfillment","includes","parseSuggestions","parseTextResponse","parseImageResponse","split","splice","messages","message","chatBox","style","display","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,OAAS,wBAAwB,YAAc,6BAA6B,aAAe,8BAA8B,IAAM,qBAAqB,KAAO,sBAAsB,UAAY,2BAA2B,IAAM,qBAAqB,KAAO,wB,gBCAzSD,EAAOC,QAAU,CAAC,SAAW,uBAAuB,UAAY,wBAAwB,gBAAkB,gC,gBCA1GD,EAAOC,QAAU,CAAC,cAAgB,8BAA8B,MAAQ,sBAAsB,YAAc,8B,gBCA5GD,EAAOC,QAAU,CAAC,oBAAsB,yCAAyC,WAAa,kC,kBCA9FD,EAAOC,QAAU,CAAC,eAAiB,6BAA6B,SAAW,yB,kBCA3ED,EAAOC,QAAU,CAAC,WAAa,iC,kBCA/BD,EAAOC,QAAU,CAAC,QAAU,wB,iJCCb,aAA2B,IAA1BC,EAAyB,0DACZC,mBAASD,GADG,mBAChCE,EADgC,KACzBC,EADyB,KAElCC,EAAc,kBAAMD,GAAS,SAACD,GAAD,OAAYA,MAC/C,MAAO,CAAEA,EAAOE,I,KCHF,SAASC,EAAT,GAAgD,IAAD,IAA/BC,YAA+B,MAAxB,MAAwB,EAAjBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAClD,OAAO,uBAAGC,UAAS,UAAKH,EAAL,YAAaC,GAAQC,QAASA,I,qBCEnC,SAASE,EAAT,GAAwC,IAAlBC,EAAiB,EAAjBA,cACpC,OACC,yBAAKF,UAAWG,IAAQC,WAAYL,QAASG,GAC5C,kBAACN,EAAD,CAAMC,KAAK,MAAMC,KAAK,iB,mBCNnBO,EAAS,SAACC,GAAD,OAAWA,EAAMC,KAAKC,MAAMD,KAAKF,SAAWC,EAAMG,UAIlD,GACdC,KAAK,GAAD,OAAKL,EAJO,CAAE,QAAS,MAAO,YAAa,gBAI3C,aAA0BA,EAHjB,CAAE,aAAc,SAGzB,YCNG,SDMH,yCACJM,KAAM,OELQ,aAAuB,wDAAC,IAAD,EACTnB,mBAAS,CAAEoB,KAAoBrB,GADtB,mBAC7BE,EAD6B,KACtBC,EADsB,KAE/BmB,EAAS,SAAChB,EAAMiB,EAASH,GAAhB,OACdjB,GAAS,SAACD,GAAD,kCAAgBA,GAAhB,qBAA0BI,EAAOiB,GAAjC,qBAA0CH,GAA1C,SACV,MAAO,CAAElB,EAAOoB,I,kDCFF,SAASE,EAAT,GAAsE,IAApDb,EAAmD,EAAnDA,cAAec,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,mBAC7D,OACC,yBAAKjB,UAAWG,IAAQe,eACvB,wBAAIlB,UAAWG,IAAQgB,aAAvB,YACA,yBAAKnB,UAAWG,IAAQiB,OACvB,kBAACxB,EAAD,CACCE,KAAI,aAAQkB,EAAe,YAAc,eACzCjB,QAASkB,IAEV,kBAACrB,EAAD,CAAME,KAAK,WAAWC,QAASG,M,oBCXpBmB,kBAAK,YAA+D,IAAD,IAA3CX,YAA2C,MAApC,GAAoC,EAAhCY,EAAgC,EAAhCA,MAAOX,EAAyB,EAAzBA,KAAMY,EAAmB,EAAnBA,gBACtDC,EAAuDrB,IAAvDqB,KAAMC,EAAiDtB,IAAjDsB,IAAKC,EAA4CvB,IAA5CuB,KAAMC,EAAsCxB,IAAtCwB,OAAQC,EAA8BzB,IAA9ByB,YAAaC,EAAiB1B,IAAjB0B,aAC9C,OACC,yBAAK7B,UAAS,UAAKwB,EAAL,YAAsB,QAATb,EAAiBc,EAAMC,IACvC,QAATf,GACA,yBAAKX,UAAW2B,GACf,yBAAKG,IAAI,mCAAmCC,IAAI,SAGjDR,GACA,yBAAKvB,UAAWG,IAAQ6B,WACvB,0BAAMhC,UAAWG,IAAQ8B,MACzB,0BAAMjC,UAAWG,IAAQ8B,MACzB,0BAAMjC,UAAWG,IAAQ8B,OAG1BvB,GAAQ,uBAAGV,UAAW4B,GAAclB,GACpCY,GAAS,yBAAKtB,UAAW6B,EAAcC,IAAKR,EAAOS,IAAI,kB,gBChB5C,SAASG,EAAT,GAAyC,IAAzBC,EAAwB,EAAxBA,IAAKZ,EAAmB,EAAnBA,gBAC7Ba,EAASC,mBAEf,OADAC,qBAAU,kBAAMF,EAAOG,QAAQC,eAAe,CAAEC,SAAU,cAEzD,yBAAKzC,UAAWG,IAAQuC,gBACvB,yBAAK1C,UAAWG,IAAQwC,UACtBR,EAAIS,KAAI,WAAwBC,GAAxB,IAAGnC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMW,EAAf,EAAeA,MAAf,OACR,kBAAC,EAAD,CAASwB,IAAKD,EAAGnC,KAAMA,EAAMC,KAAMA,EAAMW,MAAOA,OAEhDC,GAAmB,kBAAC,EAAD,CAASuB,IAAI,SAASnC,KAAK,MAAMY,iBAAe,IACpE,yBAAKwB,IAAKX,M,oBCXCf,kBAAK,YAAqD,IAA9B2B,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACvD,OAA2B,IAAvBD,EAAYvC,OAAqB,KAEpC,yBAAKT,UAAWG,IAAQ+C,qBACtBF,EAAYJ,KAAI,SAACO,EAAaN,GAAd,OAChB,yBACCC,IAAKK,EAAcN,EACnB7C,UAAWG,IAAQiD,WACnBrD,QAAS,kBAAMkD,EAAaE,KAE5B,uBAAGnD,UAAWG,IAAQkD,mBAAoBF,WCZhC,aAAwB,IAAvB5D,EAAsB,uDAAP,GAAO,EACTC,mBAASD,GADA,mBAC7BE,EAD6B,KACtBC,EADsB,KAE/B4D,EAAS,SAACC,GAAD,OAAW7D,EAAS6D,EAAMC,OAAOC,QAC1CC,EAAQ,kBAAMhE,EAAS,KAC7B,MAAO,CAAED,EAAO6D,EAAQI,I,gBCAV,SAASC,EAAT,GAAiE,IAAjDV,EAAgD,EAAhDA,aAAcW,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,kBAAqB,EACtCC,IADsC,mBACtEpD,EADsE,KAChEqD,EADgE,KACpDC,EADoD,KAc9E,OACC,yBAAKhE,UAAWG,IAAQ8D,UACvB,yBAAKjE,UAAWG,IAAQ+D,WACvB,8BACCT,MAAO/C,EACPyD,YAAaP,EAAa,oBAAsB,iBAChDQ,SAAUR,EACVS,SAlBJ,SAAsBd,GACW,oBAAhCA,EAAMe,YAAYC,UAKnB,WAAwC,IAAtBC,EAAqB,uDAAN9D,EAChCuC,EAAauB,GACbR,IANGS,GACAV,EAAWR,IAgBXmB,KAAK,IACLC,gBAAc,IACd3E,UAAWG,IAAQyE,MACnBC,WAAS,KAGX,yBAAK7E,UAAWG,IAAQ2E,iBACvB,kBAAClF,EAAD,CAAME,KAAI,aAAQ8D,EAAa,aAAe,oBAAsB7D,QAAS8D,MClClE,OACdkB,IAAK,iDACLC,YAAa,mCACbC,UAAW,4CCHG,GACdC,OAAQ,EACRC,KAAM,QACNC,KAAM,EACNC,MAAO,EACPC,MAAO,4B,iBCQO,SAASC,EAAT,GAA2C,IAAxBC,EAAuB,EAAvBA,KAAMtF,EAAiB,EAAjBA,cACjCuF,EAAS,IAAIC,IAClBC,EAAoB,IAAIC,OAAOC,wBAEhCJ,EACEK,KAAKC,GACLC,OAAM,SAACC,GAAD,OACNC,QAAQD,MAAM,gDAAiDA,MAEjEN,EAAkBQ,SAAW,SAAC5C,GAE7B,IADA,IAAI7C,EAAO,GACFmC,EAAIU,EAAM6C,YAAavD,EAAIU,EAAM8C,QAAQ5F,SAAUoC,EAC3DnC,GAAQ6C,EAAM8C,QAAQxD,GAAG,GAAGyD,WAC7BC,EAAiB7F,GACjB8F,EAAW,OAAQ9F,EAAM,QACzBmD,KAfuD,MAkBhC4C,IAlBgC,mBAkBhDtE,EAlBgD,KAkB3CtB,EAlB2C,OAmBhBrB,mBAAS,IAnBO,mBAmBhDwD,EAnBgD,KAmBnC0D,EAnBmC,OAoBbC,IApBa,mBAoBhD/C,EApBgD,KAoBnCC,EApBmC,OAqBvB8C,IArBuB,mBAqBhDC,EArBgD,KAqBxCC,EArBwC,OAsBXF,GAAe,GAtBJ,mBAsBhD3F,EAtBgD,KAsBlCC,EAtBkC,KAwBxDqB,oBAAUmD,EAAOqB,OAAQ,CAAE9F,IAC3BsB,qBACC,kBAAOsB,EAAc+B,EAAkBoB,QAAUpB,EAAkBqB,SACnE,CAAEpD,IAGH,IAAM4C,EAAa,SAAC3G,EAAMiB,EAASH,GACrB,QAATA,IACHkG,IACI7F,GAAyB,UAATnB,GAAkB4F,EAAOwB,MAAM,CAAEvG,KAAMI,KAE5DD,EAAOhB,EAAMiB,EAASH,IAGjBuG,EAAiB,SAACC,GACvBZ,EAAiBY,GACjBX,EAAW,OAAQW,EAAK,QACxBN,KAGKN,EAAmB,SAAC7F,GAAU,IAC3BqE,EAAgCqC,EAAhCrC,IAAKC,EAA2BoC,EAA3BpC,YAAaC,EAAcmC,EAAdnC,UAC1BoC,IAAEC,KAAK,CACNvC,MACAwC,YAAa,kCACbC,SAAU,OACVC,QAAS,CACRC,cAAc,UAAD,OAAY1C,IAE1B2C,KAAMC,KAAKC,UAAU,CACpBC,MAAOpH,EACPyE,KAAM,KACNF,gBAGA8C,MAAK,SAACZ,GAAD,OAASa,EAAiBb,EAAIc,OAAOC,YAAYzC,WACtDO,OAAM,kBACNQ,EACC,OACA,oEACA,WAKEwB,EAAmB,SAACb,GACrBA,EAAIgB,SAAS,QAASC,EAAiBjB,GAClCA,EAAIgB,SAAS,QAASE,EAAkBlB,GACxCA,EAAIgB,SAAS,SAAUG,EAAmBnB,GAC9CX,EAAW,OAAQW,EAAK,QAGxBiB,EAAmB,SAACjB,GACzBkB,EAAkBlB,EAAIoB,MAAM,QAAQ,IACpC7B,EAAe,IACfA,EAAeS,EAAIoB,MAAM,QAAQC,OAAO,KAGnCH,EAAoB,SAAClB,GACtBA,EAAIgB,SAAS,UAAUG,EAAmBnB,EAAIoB,MAAM,QAAQ,IAChE,IAAME,EAAWtB,EAAIoB,MAAM,QAAQC,OAAO,GAFR,uBAGlC,YAAoBC,EAApB,oDAASC,EAAT,QAA8BlC,EAAW,OAAQkC,EAAS,QAHxB,oFAM7BJ,EAAqB,SAACnB,GAAD,OAASX,EAAW,QAASW,EAAIoB,MAAM,SAAS,GAAI,QAE/E,OACC,yBAAKvI,UAAWG,IAAQwI,QAASC,MAAO,CAAEC,QAASrD,EAAO,QAAU,SACnE,kBAACzE,EAAD,CACCb,cAAeA,EACfc,aAAcA,EACdC,mBAAoBA,IAErB,kBAACiB,EAAD,CAAMC,IAAKA,EAAKZ,gBAAiBqF,IACjC,kBAAC,EAAD,CAAa5D,YAAaA,EAAaC,aAAciE,IACrD,kBAACvD,EAAD,CACCC,YAAaA,EACbC,kBAAmBA,EACnBZ,aAAciE,KCpGH4B,MAVf,WAAgB,IAAD,EACqBnC,GAAe,GADpC,mBACNgC,EADM,KACGzI,EADH,KAEd,OACC,kBAAC,WAAD,KACC,kBAACD,EAAD,CAAYC,cAAeA,EAAesF,KAAMmD,IAChD,kBAACpD,EAAD,CAASrF,cAAeA,EAAesF,KAAMmD,MCE5BI,QACW,cAA7BnD,OAAOoD,SAASC,UAEe,UAA7BrD,OAAOoD,SAASC,UAEhBrD,OAAOoD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.0e8a3201.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Message_chat__1z0vg\",\"botImg\":\"Message_botImg__2cNLG\",\"chatMessage\":\"Message_chatMessage__wquIE\",\"imageMessage\":\"Message_imageMessage__1DVaN\",\"bot\":\"Message_bot__2ltVA\",\"self\":\"Message_self__2Deh_\",\"container\":\"Message_container__1S2Td\",\"dot\":\"Message_dot__1zuZ-\",\"wave\":\"Message_wave__Gsw14\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatForm\":\"Form_chatForm__2AxI0\",\"chatInput\":\"Form_chatInput__2nX02\",\"chatFormButtons\":\"Form_chatFormButtons__QVP8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBoxHeader\":\"Header_chatBoxHeader__16r-Z\",\"icons\":\"Header_icons__2SSz4\",\"chatBotName\":\"Header_chatBotName__297om\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"suggestionContainer\":\"Suggestions_suggestionContainer__3JJoG\",\"suggestion\":\"Suggestions_suggestion___lqNm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBoxContent\":\"Logs_chatBoxContent__2Ri1g\",\"chatLogs\":\"Logs_chatLogs__1OWsJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatButton\":\"ChatButton_chatButton__skEXu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBox\":\"Chat_chatBox__2FQQW\"};","import { useState } from 'react';\r\n\r\nexport default (initialState = false) => {\r\n\tconst [ state, setState ] = useState(initialState);\r\n\tconst toggleState = () => setState((state) => !state);\r\n\treturn [ state, toggleState ];\r\n};\r\n","import React from 'react';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\nexport default function Icon({ type = 'fas', name, onClick }) {\r\n\treturn <i className={`${type} ${name}`} onClick={onClick} />;\r\n}\r\n","import React from 'react';\r\nimport Icon from './Icon';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\nimport classes from '../styles/ChatButton.module.css';\r\n\r\nexport default function ChatButton({ toggleChatBox }) {\r\n\treturn (\r\n\t\t<div className={classes.chatButton} onClick={toggleChatBox}>\r\n\t\t\t<Icon type='fas' name='fa-comments' />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import bot from '../config/bot';\r\n\r\nconst random = (array) => array[Math.floor(Math.random() * array.length)];\r\nconst greeting = [ 'hello', 'hey', 'hey there', 'hello there' ];\r\nconst intro = [ 'my name is', 'i am' ]\r\n\r\nexport default {\r\n\ttext: `${random(greeting)}, ${random(intro)} ${bot.name} ! what would you like to know about?`,\r\n\tuser: 'bot'\r\n};","export default {\r\n  name: 'krypto'\r\n}","import { useState } from 'react';\r\nimport starterMessage from '../helpers/starterMessage';\r\n\r\nexport default (initialState = []) => {\r\n\tconst [ state, setState ] = useState([ starterMessage ] || initialState);\r\n\tconst addLog = (type, payload, user) =>\r\n\t\tsetState((state) => [ ...state, { [type]: payload, user } ]);\r\n\treturn [ state, addLog ];\r\n};\r\n","import React from 'react';\r\nimport Icon from './Icon';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\nimport classes from '../styles/Header.module.css';\r\n\r\nexport default function Header({ toggleChatBox, speechOutput, toggleSpeechOutput }) {\r\n\treturn (\r\n\t\t<div className={classes.chatBoxHeader}>\r\n\t\t\t<h4 className={classes.chatBotName}>Chat Bot</h4>\r\n\t\t\t<div className={classes.icons}>\r\n\t\t\t\t<Icon\r\n\t\t\t\t\tname={`fa-${speechOutput ? 'volume-up' : 'volume-mute'}`}\r\n\t\t\t\t\tonClick={toggleSpeechOutput}\r\n\t\t\t\t/>\r\n\t\t\t\t<Icon name='fa-minus' onClick={toggleChatBox} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { memo } from 'react';\r\nimport classes from '../styles/Message.module.css';\r\n\r\nexport default memo(function Message({ text = '', image, user, typingIndicator }) {\r\n\tconst { chat, bot, self, botImg, chatMessage, imageMessage } = classes;\r\n\treturn (\r\n\t\t<div className={`${chat} ${user === 'bot' ? bot : self}`}>\r\n\t\t\t{user === 'bot' && (\r\n\t\t\t\t<div className={botImg}>\r\n\t\t\t\t\t<img src=\"https://i.ibb.co/cDCL67q/bot.png\" alt=\"bot\" />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{typingIndicator && (\r\n\t\t\t\t<div className={classes.container}>\r\n\t\t\t\t\t<span className={classes.dot} />\r\n\t\t\t\t\t<span className={classes.dot} />\r\n\t\t\t\t\t<span className={classes.dot} />\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{text && <p className={chatMessage}>{text}</p>}\r\n\t\t\t{image && <img className={imageMessage} src={image} alt=\"requested\" />}\r\n\t\t</div>\r\n\t);\r\n});\r\n","import React, { useRef, useEffect } from 'react';\r\nimport Message from './Message';\r\nimport classes from '../styles/Logs.module.css';\r\n\r\nexport default function Logs({ log, typingIndicator }) {\r\n\tconst logEnd = useRef();\r\n\tuseEffect(() => logEnd.current.scrollIntoView({ behavior: 'smooth' }));\r\n\treturn (\r\n\t\t<div className={classes.chatBoxContent}>\r\n\t\t\t<div className={classes.chatLogs}>\r\n\t\t\t\t{log.map(({ text, user, image }, i) => (\r\n\t\t\t\t\t<Message key={i} text={text} user={user} image={image} />\r\n\t\t\t\t))}\r\n\t\t\t\t{typingIndicator && <Message key=\"typing\" user=\"bot\" typingIndicator />}\r\n\t\t\t\t<div ref={logEnd} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { memo } from 'react';\r\nimport classes from '../styles/Suggestions.module.css';\r\n\r\nexport default memo(function Suggestions({ suggestions, handleSubmit }) {\r\n\tif (suggestions.length === 0) return null;\r\n\treturn (\r\n\t\t<div className={classes.suggestionContainer}>\r\n\t\t\t{suggestions.map((suggesstion, i) => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tkey={suggesstion + i}\r\n\t\t\t\t\tclassName={classes.suggestion}\r\n\t\t\t\t\tonClick={() => handleSubmit(suggesstion)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<p className={classes.suggestionMessage}>{suggesstion}</p>\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n});\r\n","import { useState } from 'react';\r\nexport default (initialState = '') => {\r\n\tconst [ state, setState ] = useState(initialState);\r\n\tconst change = (event) => setState(event.target.value);\r\n\tconst reset = () => setState('');\r\n\treturn [ state, change, reset ];\r\n};","import React from 'react';\r\nimport Icon from './Icon';\r\nimport useInputState from '../hooks/useInputState';\r\nimport classes from '../styles/Form.module.css';\r\n\r\nexport default function Form({ handleSubmit, speechInput, toggleSpeechInput }) {\r\n\tconst [ text, changeText, resetText ] = useInputState();\r\n\r\n\tfunction handleChange(event) {\r\n\t\tevent.nativeEvent.inputType === 'insertLineBreak'\r\n\t\t\t? onSubmit()\r\n\t\t\t: changeText(event);\r\n\t}\r\n\r\n\tfunction onSubmit(userResponse = text) {\r\n\t\thandleSubmit(userResponse);\r\n\t\tresetText();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.chatForm}>\r\n\t\t\t<div className={classes.chatInput}>\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tvalue={text}\r\n\t\t\t\t\tplaceholder={speechInput ?'Say Something ...' : 'Type a message'}\r\n\t\t\t\t\tdisabled={speechInput}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\trows='1'\r\n\t\t\t\t\tdata-min-rows='1'\r\n\t\t\t\t\tclassName={classes.input}\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.chatFormButtons}>\r\n\t\t\t\t<Icon name={`fa-${speechInput ?'microphone' : 'microphone-slash'}`} onClick={toggleSpeechInput} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","export default {\r\n\turl: 'https://api.dialogflow.com/v1/query?v=20150910',\r\n\taccessToken: '38578c4faf424691a4540abffe6a1ec8',\r\n\tsessionId: 'izqGQrUr7FItDPD1XVKuVxGbiDBRNspylOSwfNfA',\r\n};\r\n","export default {\r\n\tvolume: 1,\r\n\tlang: 'en-GB',\r\n\trate: 1,\r\n\tpitch: 1,\r\n\tvoice: 'Google UK English Female'\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport useToggleState from '../hooks/useToggleState';\r\nimport useLogState from '../hooks/useLogState';\r\nimport $ from 'jquery';\r\nimport Speech from 'speak-tts';\r\nimport Header from './Header';\r\nimport Logs from './Logs';\r\nimport Suggestions from './Suggestions';\r\nimport Form from './Form';\r\nimport dialogflow from '../config/dialogflow';\r\nimport speechConfig from '../config/speechOutput';\r\nimport classes from '../styles/Chat.module.css';\r\n\r\nexport default function ChatBox({ open, toggleChatBox }) {\r\n\tconst speech = new Speech(),\r\n\t\tspeechRecognition = new window.webkitSpeechRecognition();\r\n\r\n\tspeech\r\n\t\t.init(speechConfig)\r\n\t\t.catch((error) =>\r\n\t\t\tconsole.error('An error occured while initializing Speech : ', error)\r\n\t\t);\r\n\tspeechRecognition.onresult = (event) => {\r\n\t\tlet text = '';\r\n\t\tfor (let i = event.resultIndex; i < event.results.length; ++i)\r\n\t\t\ttext += event.results[i][0].transcript;\r\n\t\tfetchBotResponse(text);\r\n\t\taddMessage('text', text, 'user');\r\n\t\ttoggleSpeechInput();\r\n\t};\r\n\r\n\tconst [ log, addLog ] = useLogState();\r\n\tconst [ suggestions, setSuggestions ] = useState([]);\r\n\tconst [ speechInput, toggleSpeechInput ] = useToggleState();\r\n\tconst [ typing, toggleTyping ] = useToggleState();\r\n\tconst [ speechOutput, toggleSpeechOutput ] = useToggleState(true);\r\n\r\n\tuseEffect(speech.cancel, [ speechOutput ]);\r\n\tuseEffect(\r\n\t\t() => (speechInput ? speechRecognition.start() : speechRecognition.stop()),\r\n\t\t[ speechInput ]\r\n\t);\r\n\r\n\tconst addMessage = (type, payload, user) => {\r\n\t\tif (user === 'bot') {\r\n\t\t\ttoggleTyping();\r\n\t\t\tif (speechOutput && type !== 'image') speech.speak({ text: payload });\r\n\t\t}\r\n\t\taddLog(type, payload, user);\r\n\t};\r\n\r\n\tconst onUserResponse = (res) => {\r\n\t\tfetchBotResponse(res);\r\n\t\taddMessage('text', res, 'user');\r\n\t\ttoggleTyping();\r\n\t};\r\n\r\n\tconst fetchBotResponse = (text) => {\r\n\t\tconst { url, accessToken, sessionId } = dialogflow;\r\n\t\t$.post({\r\n\t\t\turl,\r\n\t\t\tcontentType: 'application/json; charset=utf-8',\r\n\t\t\tdataType: 'json',\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${accessToken}`\r\n\t\t\t},\r\n\t\t\tdata: JSON.stringify({\r\n\t\t\t\tquery: text,\r\n\t\t\t\tlang: 'en',\r\n\t\t\t\tsessionId\r\n\t\t\t})\r\n\t\t})\r\n\t\t\t.then((res) => parseBotResponse(res.result.fulfillment.speech))\r\n\t\t\t.catch(() =>\r\n\t\t\t\taddMessage(\r\n\t\t\t\t\t'text',\r\n\t\t\t\t\t\"it seems like there's something wrong. could you try again later?\",\r\n\t\t\t\t\t'bot'\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t};\r\n\r\n\tconst parseBotResponse = (res) => {\r\n\t\tif (res.includes('<ar>')) parseSuggestions(res);\r\n\t\telse if (res.includes('<br>')) parseTextResponse(res);\r\n\t\telse if (res.includes('<img>')) parseImageResponse(res);\r\n\t\telse addMessage('text', res, 'bot');\r\n\t};\r\n\r\n\tconst parseSuggestions = (res) => {\r\n\t\tparseTextResponse(res.split(/<ar>/)[0]);\r\n\t\tsetSuggestions([]);\r\n\t\tsetSuggestions(res.split(/<ar>/).splice(1));\r\n\t};\r\n\r\n\tconst parseTextResponse = (res) => {\r\n\t\tif (res.includes('<img>')) parseImageResponse(res.split(/<br>/)[0]);\r\n\t\tconst messages = res.split(/<br>/).splice(1);\r\n\t\tfor (var message of messages) addMessage('text', message, 'bot');\r\n\t};\r\n\r\n\tconst parseImageResponse = (res) => addMessage('image', res.split(/<img>/)[1], 'bot');\r\n\r\n\treturn (\r\n\t\t<div className={classes.chatBox} style={{ display: open ? 'block' : 'none' }}>\r\n\t\t\t<Header\r\n\t\t\t\ttoggleChatBox={toggleChatBox}\r\n\t\t\t\tspeechOutput={speechOutput}\r\n\t\t\t\ttoggleSpeechOutput={toggleSpeechOutput}\r\n\t\t\t/>\r\n\t\t\t<Logs log={log} typingIndicator={typing} />\r\n\t\t\t<Suggestions suggestions={suggestions} handleSubmit={onUserResponse} />\r\n\t\t\t<Form\r\n\t\t\t\tspeechInput={speechInput}\r\n\t\t\t\ttoggleSpeechInput={toggleSpeechInput}\r\n\t\t\t\thandleSubmit={onUserResponse}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport useToggleState from '../hooks/useToggleState';\r\nimport ChatButton from './ChatButton';\r\nimport ChatBox from './ChatBox';\r\n\r\nfunction App() {\r\n\tconst [ chatBox, toggleChatBox ] = useToggleState(true);\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<ChatButton toggleChatBox={toggleChatBox} open={chatBox} />\r\n\t\t\t<ChatBox toggleChatBox={toggleChatBox} open={chatBox} />\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './helpers/serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}